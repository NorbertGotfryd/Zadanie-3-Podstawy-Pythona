#importy wymaganych bibliotek
import requests
import csv
import datetime

# wprowadzenie danych faktur
while True:
    try:
        invoice_value = int(input("Podaj wartość faktury:\n"))
        break
    except ValueError:
        print("[BŁĄD] Proszę podać wartość w formacie liczbowym")

while True:
    invoice_currency = input("Wybierz walutę z podanych:\nEUR\nUSD\nCZK\n")
    if invoice_currency == "EUR" or invoice_currency == "USD" or invoice_currency == "CZK":
        break
    else:
        continue

while True:
    try:
        invoice_date = input("Podaj datę wystawienia (RRRR-MM-DD\n)")
        datetime.date.fromisoformat(invoice_date)
        break
    except ValueError:
        print("Nieprawidłowy format danych, proszę podać datę w formacie RRRR-MM-DD")

invoice = [invoice_value, invoice_currency, invoice_date]

# wprowadzenie danych płatności
while True:
    try:
        payment_value = int(input("Podaj wartość płatności:\n"))
        break
    except ValueError:
        print("[BŁĄD]  Proszę podać wartość w formacie liczbowym")

while True:
    payment_currency = input("Wybierz walutę z podanych:\nEUR\nUSD\nCZK\n")
    if payment_currency == "EUR" or payment_currency == "USD" or payment_currency == "CZK":
        break
    else:
        continue

while True:
    try:
        payment_date = input("Podaj datę płatności (RRRR-MM-DD\n)")
        datetime.date.fromisoformat(payment_date)
        break
    except ValueError:
        print("Nieprawidłowy format danych, proszę podać datę w formacie RRRR-MM-DD")

payment = [payment_value, payment_currency, payment_date]

# zapis faktur do pliku txt
with open('invoices.txt', 'a', encoding='UTF8') as invoices_file:
    writer = csv.writer(invoices_file)
    writer.writerow(invoice)
    invoices_file.close()

# zapis metody płatności do pliku txt
with open('payments.txt', 'a', encoding='UTF8') as payment_file:
    writer = csv.writer(payment_file)
    writer.writerow(payment)
    payment_file.close()

currency = payment_currency
quantity = int(invoice_value)

# komunikacja z API
communication = requests.get(f'http://api.nbp.pl/api/exchangerates/rates/c/{payment_currency}/{payment_date}/?format=json')
response = communication.json()
result = response['rates'][0]['bid'] * quantity

# zapis wyniku operacji do pliku txt
with open('payment_results.txt', 'a', encoding='UTF8') as results_file:
            writer = csv.writer(results_file)
            results_file.write(str(result))
            results_file.close()

# wyświetlenie w terminalu informacji o statusie faktury
if invoice_value == payment_value:
    print(f"wartośc faktury wynosi {invoice_value}, czyli {result} w {payment_currency} - stan na dzień {invoice_date} - Faktura została opłacona w całośći")
elif invoice_value < payment_value:
    print(f"wartośc faktury wynosi {invoice_value}, czyli {result} w {payment_currency} - stan na dzień {invoice_date} - zapłacone zostało {payment_value} z {invoice_value} wymaganych - nastąpiła nadpłata (wymagany zwrot w kwocie", int(payment_value) - int(invoice_value),")")
else:
    print(f"wartośc faktury wynosi {invoice_value}, czyli {result} w {payment_currency} - stan na dzień {invoice_date} - zapłacone zostało {payment_value} z {invoice_value} wymaganych - nastąpiła niedopłata (wymagana dopłata w kwocie", int(invoice_value) - int(invoice_value),")")